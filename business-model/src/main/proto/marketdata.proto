
syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.google.cloud.orderbook.model";
option java_outer_classname = "MarketData";

message OrderBookEvent {
  int64 timestampMS = 1;  // Millisecond timestamp
  int64 contractId = 2;   // Contract ID (unique ordering)
  int64 messageId = 3;    // Message ID

  // Global and per-contract sequence ID.
  //
  // SequenceID 1 is the always the first message in the sequence.
  // The first message will have a meaningful OrderBookEvent (side, etc)
  //
  int64 seqId = 4;
  int64 contractSeqId = 5;

  // This is true when it is the last message for the all contracts.
  // There will be no meaningful order information associated (or even
  // contractId).
  bool lastMessage = 6;

  // This is true when it is the last message for the contract. There will
  // be no meaningful order information associated.
  bool lastContractMessage = 7;

  // Event type
  // NOTE: Aggressive matching orders will
  // never issue a NEW or DELETED event, unless
  // there is a quantity that becomes passive.
  enum Type {
    UNSPECIFIED_ORDER = 0;
    NEW = 1;
    EXECUTED = 2;
    DELETED = 3;
  }
  Type type = 8;

  // OrderID for the passive order.
  int64 orderId = 9;

  // Side for the passive order.
  enum Side {
    UNSPECIFIED_SIDE = 0;
    BUY = 1;
    SELL = 2;
  }
  Side side = 10; // enum Buy/Sell

  int64 price = 11;
  int64 quantity = 12;
  int64 quantityRemaining = 13;
  int64 quantityFilled = 14;

  // If it is an execution, record the matchNumber
  int64 matchNumber = 15;
}

message MarketDepth {
  int64 timestampMS = 1;   // Millisecond timestmp
  int64 contractId = 2;    // Contract ID (unique ordering)
  int64 messageId = 3;     // Message ID (corresponds to OrderBookEvent messageId)

  // Sequence IDs (global and per contract) will skip
  // any updates that do not generate a market depth.
  int64 seqId = 4;
  int64 contractSeqId = 5;

  // Current market depth (ordered by most significant to
  // least significant bid & offer)
  message PriceQuantity {
    int64 price = 1;
    int64 quantity = 2;
  }
  repeated PriceQuantity bids = 6;
  repeated PriceQuantity offers = 7;

  // If a trade was executed for this event,
  // capture this here.
  PriceQuantity lastTrade = 8;
}
